// 攻击原理
// 受害者登录：用户在受信任的网站（例如银行）上登录，并获得一个有效的会话（通常通过 Cookie 存储会话标识符）。
// 攻击者准备恶意请求：攻击者创建一个恶意网站或页面，包含会触发受信任网站上敏感操作的请求。
// 诱导受害者访问恶意网站：受害者在保持登录状态的情况下，访问了攻击者的恶意网站。
// 发送恶意请求：恶意网站自动或通过用户操作发送请求到受信任的网站。由于受信任的网站认为请求来自已认证用户，会正常处理请求，从而执行恶意操作。


// 如何攻击和获取用户的登录态
// 攻击者无法直接获取用户的登录态，但可以利用用户已登录的状态来执行操作。通常，通过以下方式诱导用户访问恶意网站：
// 
// 电子邮件：发送带有恶意链接的电子邮件，诱导用户点击。
// 社交工程：在社交网络上发布诱导链接。
// 嵌入代码：在受攻击者控制的网站或论坛上嵌入恶意代码，如 <img src="http://trusted-site.com/transfer?amount=1000&to=attacker">，用户访问时会发送恶意请求。


/**
 * 防御 CSRF 攻击
 * CSRF Token：在每个敏感操作的请求中包含一个唯一的、不可预测的令牌（token）。服务器验证令牌，只有令牌有效时才处理请求。
 * 双重提交 Cookie：将 CSRF Token 存储在 Cookie 中，并在请求中包含该令牌，服务器验证两个令牌是否匹配。
 * SameSite Cookie 属性：将 Cookie 的 SameSite 属性设置为 Strict 或 Lax，限制跨站点请求携带 Cookie。
 * 验证请求来源：检查请求的来源（Origin 或 Referer 头），确保请求来自可信任的域名。
 */


//CSRF 和 XSS 的区别
// XSS（Cross-Site Scripting，跨站脚本攻击）
// XSS 是一种将恶意脚本注入到受信任的网站的攻击方式。
// 攻击者利用网站的漏洞，将恶意 JavaScript 代码注入到网页中，当用户访问该网页时，恶意代码会在用户的浏览器中执行，从而盗取用户信息或执行其他恶意操作。



// cookie通常是不能跨域访问的，那问什么会有csrf攻击??

// 疑问：
// 
// csrf说用户访问了A网站，然后又访问恶意网站B, B中也发送请求到A，携带A站的cookie，这样就构成了csrf。 可是cookie好像是不支持跨域的吧？
// 
// 回答
// 
// 浏览器会依据加载的域名附带上对应域名cookie，又不是发送b站的cookie。
// 就是如果用户在a站登录了生成了授权的cookie 之类的，然后访问b站，b站故意构造请求a站的请求，如删除操作之类的，用script，img或者iframe之类的加载a站着个地址，浏览器会附带上a站此登录用户的授权cookie信息，这样就构成crsf，会删除掉当前用户的数据