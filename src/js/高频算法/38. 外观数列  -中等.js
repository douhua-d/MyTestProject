// 38. 外观数列  -中等
/**
 *
 * 相关标签
 * 相关企业
 * 提示
 * 「外观数列」是一个数位字符串序列，由递归公式定义：
 * 
 * 外观数列的定义如下：

    第一项是 "1"
    每一项都是对前一项的描述
    例如：

    第1项: "1"
    第2项: "11" （描述为“一个1”）
    第3项: "21" （描述为“两个1”）
    第4项: "1211" （描述为“一个2，一个1”）
    第5项: "111221" （描述为“一个1，一个2，两个1”）
 *
 *  解决思路
    为了生成外观数列的第 n 项，我们可以采用迭代的方法。具体步骤如下：

    初始化：从第一项 "1" 开始。
    迭代生成：对于每一项，从前一项生成当前项。
    遍历前一项的字符串。
    统计连续相同数字的个数。
    将计数和数字拼接起来，构成当前项的一部分。
    重复步骤2，直到生成第 n 项。
 *
 * 示例 1：
 *
 * 输入：n = 4
 *
 * 输出："1211"
 *
 * 解释：
 *
 * countAndSay(1) = "1"
 *
 * countAndSay(2) = "1" 的行程长度编码 = "11"
 *
 * countAndSay(3) = "11" 的行程长度编码 = "21"
 *
 * countAndSay(4) = "21" 的行程长度编码 = "1211"
 */

/**
 * 生成外观数列的第 n 项
 * @param {number} n - 要生成的外观数列的项数
 * @return {string} - 外观数列的第 n 项
 */
function countAndSay (n) {
    // 基本情况，如果 n 是 1，直接返回 "1"
    if (n === 1) return '1';

    // 递归地获取前一项的外观数列
    const prevSeq = countAndSay(n - 1);

    // 初始化结果字符串和计数器
    let result = '';
    let count = 1;

    // 遍历前一项的外观数列字符串
    for (let i = 0; i < prevSeq.length; i++) {
        // 如果当前字符与下一个字符相同，增加计数器
        if (i + 1 < prevSeq.length && prevSeq[i] === prevSeq[i + 1]) {
            count++;
        } else {
            // 如果当前字符与下一个字符不同或已到字符串末尾
            // 将计数器和字符追加到结果字符串中
            result += count.toString() + prevSeq[i];
            // 重置计数器
            count = 1;
        }
    }

    // 返回生成的结果字符串
    return result;
}

// 测试示例
console.log(countAndSay(4)); // 输出: "1211"

