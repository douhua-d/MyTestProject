// 1047. 删除字符串中的所有相邻重复项  -简单

/**
 * 给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。
 *
 * 在 S 上反复执行重复项删除操作，直到无法继续删除。
 *
 * 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。
 *
 *
 *
 * 示例：
 *
 * 输入："abbaca"
 * 输出："ca"
 * 解释：
 * 例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。
 */

// 解决思路
// 使用栈：利用栈的数据结构来处理相邻重复字符的删除操作。栈适合这种操作，因为可以方便地检查和删除最后插入的字符。
// 遍历字符串：遍历输入字符串 S，对于每个字符，如果栈顶字符和当前字符相同，则弹出栈顶字符；否则，将当前字符压入栈中。
// 构建结果：遍历结束后，栈中的字符就是最终结果。将栈中的字符拼接成字符串返回即可


/**
 * 示例分析
 * 输入："abbaca"：
 * 初始化栈：[]
 * 遍历字符串：
 * a -> 压入栈：[a]
 * b -> 压入栈：[a, b]
 * b -> 栈顶相同，弹出栈顶：[a]
 * a -> 栈顶相同，弹出栈顶：[]
 * c -> 压入栈：[c]
 * a -> 压入栈：[c, a]
 * 最终结果：ca
 * 这种方法在时间复杂度和空间复杂度上都是 O(n)，其中 n 是字符串的长度。由于我们只遍历字符串一次，并且每个字符最多被压入和弹出栈一次，因此效率较高。
 * @param s
 * @returns {string}
 */

var removeDuplicates = function(s) {
  let stack = [];

  for (let char of s) {
    if (stack.length > 0 && stack[stack.length - 1] === char) {
      stack.pop();  // 如果当前字符与栈顶字符相同，弹出栈顶字符
    } else {
      stack.push(char);  // 否则，将当前字符压入栈中
    }
  }

  // 栈中的字符即为删除相邻重复字符后的结果
  return stack.join("");
};

// 示例使用
console.log(removeDuplicates("abbaca"));  // 输出: "ca"
console.log(removeDuplicates("azxxzy"));  // 输出: "ay"